<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oxygenxml.com/docbook/xml/5.0/rng/dbsvg.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>

<!DOCTYPE article PUBLIC "ARTICLE" "docbook.dtd">
<?xml-stylesheet type="text/css" href="./css/docbook.css"?>

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/2001/xlink" version="5.0">
    <info>
        <title>
            <emphasis> Mancala </emphasis></title>
        <subtitle>Praktikum: XML-Technologie</subtitle>
        <pubdate>01.07.2016</pubdate>
    </info>
    <para>
        <wordasword>Mancala</wordasword>, also Manqala or Mancala, is a very popular ancient game with numerous variations. This count-and-capture game can be played 
        by two people, with the aim of winning the most "seeds" on the "field". </para>
    <section>
        <title>Introduction</title>
        <para><emphasis role="underline">Type</emphasis> Board game</para>
        <para><emphasis role="underline">Number of players</emphasis> Mostly two </para>
        <para>At the beginning of the game, a <emphasis role="bold">Mancala-Playboard</emphasis> is
            needed. The board will be seperated into 2 rows. Each player has 6 small <emphasis
                role="bold">"houses"</emphasis> on their side, and a big <emphasis role="bold">"store"
                </emphasis> - which also called <emphasis role="bold">Kalah</emphasis> - where the
            stones are to be collected and stored. In this lab course, we chose the Kalah-version,
            which uses 36 "seeds" equally distributed in 12 houses.</para>
    </section>
    
    <section>
        <title>Playing rules</title>
        <para><emphasis role="underline"><emphasis role="bold">Game objective</emphasis></emphasis>
            : The objective of the game is to capture more seeds than the opponent. </para>
        
        <itemizedlist mark="opencircle">
            <listitem>
                <para>Player begins by choosing a house at his option and starts distributing the
                    seeds around the board until there is no seed left in his hand. The seeds should
                    be dropped one-by-one and in counterclockwise direction. The opponent's Kalah
                    should be skipped. </para>
            </listitem>
            <listitem>
                <para>If the last seed is dropped into the player's Kalah, he got an extra turn. </para>
            </listitem>
            <listitem>
                <para>If the last seed falls into an empty house owned by the player, player is
                    allowed to capture all the seeds of the opposite house and store them in his own
                    Kalah. </para>
            </listitem>
            <listitem>
                <para>The player who still has seeds on his side of the board when the opponent's
                    houses are empty captures all of those.</para>
            </listitem>
            <listitem>
                <para>The game ends where there are no seeds left on the 12 houses. The player with
                    the most seeds wins the game. </para>
            </listitem>
        </itemizedlist>
    </section>
    
    <section>
        <title>Technologies</title>
        <para>In this lab course, there were many of XML-Technologies used. 
            <itemizedlist mark="opencircle">
                <listitem>
                    <para> SVG: Scalable Vector Graphics, helps describing two-dimensional graphics for the Web with support for interactivity and animation.</para>
                    <para> XSLT, XSL: EXtensible Stylesheet Language is a part of XSL, which is the stylesheet language for XML. XSLT helps transforming XML Documents into other XML Documents.</para>
                    <para> XQuery is to XML what SQL is to database tables. XML Data will be queried thanks to XQuery.  </para>
                    <para> BaseX: scalable, high performance XML Database engine which allows querying and storing XML on the net.</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    
    <section>
        <title>Diagrams</title>
        <para>Use Cases and Use Case Diagram
            The mancala game can be splitted up in the following usecases:
            <itemizedlist>
                <listitem>
                    <para>
                        Initially the players want to be able to start a new game of mancala.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                The players also want have the possibility to discard the current game and restart it.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Each player wants to be able to make specific moves.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The players want to be able to win the game and see how many games they won so far.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        If the players decide to continue the match later, they want to be able to save and load the game.
                    </para>
                </listitem>
            </itemizedlist>
            <mediaobject>
                <imageobject>
                    <imagedata
                        fileref="./../Diagrams/UseCases.pdf"
                    />
                </imageobject>
            </mediaobject>
        </para>
        
        <section>
            <title>Architecture</title>
            <para>
                The following diagram show the architecture of our implementation of the Mancala game. The architecture can be divided in three components:
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>Database</emphasis>:
                            The database represents the storage for one gamestate. That means one current instance of the game is saved in the database.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Client</emphasis>:
                            The client is the frontend of the application, i.e. the user interaction interface. Any action from the players will be forwarded as a RESTful request to the server. 
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Server</emphasis>:
                            The server receives the requests (actions) from the client and then acts as a controller by deciding if a new gamestate should be created or the existing gamestate (currently saved on the database) should be edited. Independently from that decision the new gamestate will be stored in the database and a visual representation of this gamestate is being returned to the client.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <mediaobject>
                <imageobject>
                    <imagedata
                        fileref="./../Diagrams/Architecture.pdf"
                    />
                </imageobject>
            </mediaobject>
        </section>
        
        <section>
            <title>Sequence</title>
            <para>
                The following sequence diagrams describe a chain of events that is triggered when a player interacts with the system.
            </para>
            <section>
                <title>Create game</title>
                <para>
                    To start a new game the player presses the start button.
                    <enumeratedlist>
                        <listitem>
                            <para>
                                <emphasis>a action</emphasis>:
                                such action
                            </para>
                        </listitem>
                    </enumeratedlist>
                </para>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="./../Diagrams/Sequence_createGame.pdf"
                        />
                    </imageobject>
                </mediaobject>
            </section>
            <section>
                <title>Select a house</title>
                <para>
                    click it
                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis>a action</emphasis>:
                                such action
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="./../Diagrams/Sequence_clickHouse.pdf"
                        />
                    </imageobject>
                </mediaobject>
            </section>
        </section>
        
        <section>
            <title>Classes</title>
            <para>
                The following list explains the classes shown in the class diagram.
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>Player</emphasis>:
                            The Player class represents one of two players. It has an ID to differentiate between the players and each player has a winCount, which contains the amount of won games. Thereby it has the method to increase the winCount after a won match and the method to reset the winCount if the game session has came to an end.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Players</emphasis>:
                            The Players class is the controller of two Player classes. It remembers which players turn it is and provides the according methods to set/get/toggle the player turn. 
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>GameObject</emphasis>:
                            The GameObject is an abstract class which works as a superclass for the House and the Store class. 
                            To identify the different GameObjects they contain the property ID. Furthermore, each GameObject tracks the amount of seeds in it and provide the appropriate methods to get/set/increment the current seedCount.
                            The Store and the House classes has up to now the exact same attributes and methods as their superclass.
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis>House</emphasis>:
                                    The houses represents the holes on the board in which the seeds will sit in.  
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis>Store</emphasis>:
                                    The store is the slightly bigger house, which stores all the seeds a player won. Therefore, each player has only one store.
                                </para>
                            </listitem>
                        </itemizedlist>
                        
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Layer</emphasis>:
                            The Layer class is just a wrapper class for the store and the houses of one player. Since a player has six houses and one store it consists exactly of six houses and one store. Furthermore, the Layer class contains the attribute position, which is an enumeration of either "top" or "bottom". 
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Board</emphasis>:
                            The board is the contoller class for the mancala board. It consists of two layers - one top and one bottom layer. The board is able to get a hosue or a store by its ID so that the appropriate method (inSeedCount) can be called if a player clicks on a house. The board also wraps getting a house/store and calling its incSeedCount by the handler method clickedHouse, which is called if a player clicks on a house. Finally the board contains the resetBoard method, which sets the board to its initial setup.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Game</emphasis>:
                            The game is the top level controller of one instance of a game. It consists of the Board and the Players class and after calling the contructor the currentGame property is instanciated. Additionally it has the method to reset the current game.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <mediaobject>
                <imageobject>
                    <imagedata
                        fileref="./../Diagrams/Classes.pdf"
                    />
                </imageobject>
            </mediaobject>
        </section>
    </section>
    
    <section>
        <title>Implementation</title>
        <section>
            <title>Filestructure</title>
            <para>
                The following list shows the files, which were used to implement the basic functionalities of XQuery for mancala.
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>gamestate.xml</emphasis>:
                            Contains all elements shown in the class diagram with according mulitplicity.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>gamestate.dtd</emphasis>:
                            The DTD file for "gamestate.xml", which declares all elements.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>mancala_methods.xql</emphasis>:
                            Contains all methods described in the class diagram
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        
        <section>
            <title>Namespaces</title>
            <para>In order to realise the architecture represented in the classdiagram we introduced multiple namespaces, to simulate class-scopes. Since only classes with methods received their own namespace, the layer and the position are the only classes which do not have an explicit namespace. Accordingly each method is defined in the namespace of its class.</para>
        </section>
        
        <section>
            <title>Single Node Updates</title>
            <para>As XQuery updates are gathered and applied at once the end of the XQuery script, nodes cannot be updated multiple times. Therefore, the amount of seeds is calculated and each house is updated only once.</para>
        </section>
    </section>
    
    <section>
        <title>Reflections</title>
        <section>
            <title>Updating vs FLWOR</title>
            <para>By marking a function <emphasis>updating</emphasis>, FLWOR statements cannot be used inside the function scope. To mitigate this issue, updating functions use getters on composite objects instead of local <emphasis>let</emphasis> variables.</para>
        </section>
    </section>
    
    <section>
        <title>Future Work</title>
        <para>The game could be improved by adding the following additional features</para>
        
        <section>
            <title>Play against the computer</title>
            <para>The player has the possibility to choose between playing against a real opponent
                or against the computer. When a game against the computer is selected, the player
                can chose the difficulty level of the game. There are 3 options available - easy,
                medium, difficult.</para>
        </section>
        <section>
            <title>Allow multiple pairs of users to play simultaneously</title>
            <para>Currently, the mancala application can only save the state of one game which
                limits it to allowing only two users to play. In order to extend the service and
                support a multiple number of games simultaneously, each game state should be
                preserved separatelly.</para>
        </section>
        <section>
            <title>User Ranking</title>
            <para>Allowing multiple games at the same time asumes a bigger number of users. Adding a
                user ranking and statistics would provide the players with a better overview of
                their own performance as well as of their competitors. The statistics could be
                integrated into each user's profile, showing the amount of games he/she won or lost.
                A hall of fame listing the best 5 players of all time could be an additional
                motivation for the users.</para>
        </section>
        <section>
            <title>User Network</title>
            <para>Building a user network allows the inegration of many additional features which
                can improve the user experience. As mentoined above, each use will have a profile
                that shows his statistics. The profile will also be visible for other players.
                Additional features could include challenging a user, chat as well as offline
                messaging.</para>
        </section>
        <section>
            <title>Animation</title>
            <para>Adding animation and special effects to the game play would also have a positive
                impact on the user experience. An example for such special effects is animating the
                movement of the seeds or adding sound effects when a seed get into the user's
                store.</para>
        </section>
    </section>
</article>
